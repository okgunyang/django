/* global require, exports */var path = require('path');var User = require('../models/user');var store = require('../common/store');var userdata = require('../config/userdata');var datapath = path.join(__dirname, '../config/userdata.json');exports.index = function (req, res) {    res.render('index', {        title: 'React CLI Demo',        msg: "Welcome to React!"    });};exports.login = function (req, res) {    res.render('login', {        title: 'React CLI Demo -- Login Page'    });};exports.list = function (req, res) {    if (!userdata || userdata.length === 0) {        return res.json({            ok: true,            data: []        });    }    res.json({        ok: true,        data: userdata.map(function (item) {            return new User(item);        })    });};exports.doLogin = function (req, res) {    var loginUser = req.params;    var filterUser = userdata.filter(function (item) {        return item.name === loginUser.username && item.password === loginUser.password;    });    if (filterUser !== null && filterUser.length > 0) {        res.cookie('user', loginUser.username, {path: '/', maxAge: 36000000});        req.session.user = filterUser;        return res.json({            ok: true,            msg: "登录成功！"        });    }    res.json({        ok: false,        msg: "登录失败！"    });};exports.doLogout = function (req, res) {    delete req.session.user;    res.cookie('user', '', {path: '/', maxAge: -1});    return res.redirect("login");};exports.doUpdate = function (req, res) {    var user = new User(req.body);    userdata = userdata.map(function (item) {        if (item.name === user.name) {            item = user;        }        return item;    });    var userdata_string = JSON.stringify(userdata, null, 4);    store.setToLocal(datapath, userdata_string, function (err, data) {        if (err) {            return res.json({ok: false, msg: "更新用户信息失败！", error: err});        }        res.json({ok: true, data: userdata, msg: "更新用户信息成功！", error: null});    });};exports.doDelete = function (req, res) {    var user = new User(req.body);    var index = -1;    if(user.name === "admin"){        return res.json({ok: false, msg: "删除用户信息失败，admin不能删除！", error: null});    }    for(var i in userdata){        var item = userdata[i];        if(item.name === user.name){            index = i;            break;        }    }    if(index >= 0){        userdata.splice(index, 1);    }    var userdata_string = JSON.stringify(userdata, null, 4);    store.setToLocal(datapath, userdata_string, function (err) {        if (err) {            return res.json({ok: false, msg: "删除用户信息失败！", error: err});        }        res.json({ok: true, data: userdata, msg: "删除用户信息成功！", error: null});    });};exports.doAdd = function (req, res) {    var user = new User(req.body);    var filterUser = userdata.filter(function(item){        return item.name === user.name;    });    if(filterUser && filterUser.length > 0){        return res.json({ok: false, msg: "新增用户信息失败，该账号已经存在！"});    }    userdata.push(user);    var userdata_string = JSON.stringify(userdata, null, 4);    store.setToLocal(datapath, userdata_string, function (err) {        if (err) {            return res.json({ok: false, msg: "新增用户信息失败！", error: err});        }        res.json({ok: true, data: userdata, msg: "新增用户信息成功！", error: null});    });};