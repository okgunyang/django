#!/usr/bin/env node

var cmd = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

/* global process */
var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');
var util = require('../util/file');

var version = pkg.version;

process.exit = exit;

before(cmd, 'outputHelp', function () {
    this.allowUnknownOption();
});

cmd.version(version).usage('[options] [dir]')
        .option('-e, --ejs', 'add ejs template engine support (defaults to jade)')
        .option('    --hbs', 'add handlebars template engine support')
        .option('-H, --hogan', 'add hogan.js template engine support')
        .option('-i, --ie8', 'add ie8 support')
        .option('-w, --webpack', 'add webpack middleware support')
        .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)')
        .option('    --git', 'add .gitignore')
        .option('-f, --force', 'force on non-empty directory')
        .option('-p, --pm2', 'add PM2 production process manager for Node.js applications')
        .parse(process.argv);

if (!_exit.exited) {
    main();
}

function before(obj, method, fn) {
    var old = obj[method];

    obj[method] = function () {
        fn.call(this);
        old.apply(this, arguments);
    };
}

/**
 * 
 * @param {type} msg
 * @param {type} callback
 * @returns {undefined}
 */
function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(msg, function (input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}

/**
 * 
 * @param {type} app_name
 * @param {type} path
 * @returns {undefined}
 */
function createApplication(app_name, path) {
    var wait = 3;

    console.log();
    function complete() {
        if (--wait)
            return;
        var prompt = launchedFromCmd() ? '>' : '$';

        console.log();
        console.log('   install dependencies:');
        console.log('     %s cd %s && npm install', prompt, path);
        console.log();
        console.log('   run the app:');

        if (launchedFromCmd()) {
            console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
        } else {
            console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
        }

        console.log();
    }

    var app = read('templates/js/app.js');
    var www = read('templates/js/bin/www');
    var index = read('templates/src/containers/IndexExt.js');
    www = www.replace('{name}', app_name);

    util.mkdir(path, function () {

        // 生成package.json
        var pkg = {
            name: app_name
            , version: '0.0.0'
            , private: true
            , scripts: {start: 'node ./bin/www'}
            , dependencies: {
                'express': '~4.13.4',
                "express-session": "~1.12.1",
                'body-parser': '~1.13.2',
                'cookie-parser': '~1.3.5',
                'debug': '~2.2.0',
                'serve-favicon': '~2.3.0',
                "bootstrap": "~3.3.6",
                "history": "~2.0.1",
                "http-proxy": "~1.13.2",
                "isomorphic-fetch": "~2.2.0",
                "moment": "~2.10.6",
                "morgan": "~1.7.0",
                "react": "~0.14.7",
                "react-dom": "~0.14.7",
                "react-bootstrap": "~0.28.3",
                "react-router": "~2.0.1",
                "react-router-bootstrap": "~0.20.1",
                "react-redux": "~4.4.1",
                "redux": "~3.3.1",
                "redux-logger": "~2.3.1",
                "redux-router": "~1.0.0-beta8",
                "redux-thunk": "~2.0.1",
                "underscore": "~1.8.3"
            }, devDependencies: {
            }
        };

        // 生成模板
        switch (cmd.template) {
            case 'ejs':
                copy('templates/views/ejs', path + '/src/views');
                pkg.dependencies['ejs'] = '~2.4.1';
                break;
            case 'jade':
                copy('templates/views/jade', path + '/src/views');
                pkg.dependencies['jade'] = '~1.11.0';
                break;
            case 'hjs':
                copy('templates/views/hogan', path + '/src/views');
                pkg.dependencies['hjs'] = '~0.0.6';
                break;
            case 'hbs':
                copy('templates/views/hbs', path + '/src/views');
                pkg.dependencies['hbs'] = '~4.0.0';
                break;
        }
        app = app.replace('{views}', cmd.template);

        // 生成css
        switch (cmd.css) {
            case 'less':
                copy('templates/css/style.less', path + '/src/stylesheets/style.less');
                copy('templates/css/bootstrap.less', path + '/src/stylesheets/bootstrap.less');
                app = app.replace('{css}', eol + 'app.use(require(\'less-middleware\')(path.join(__dirname, \'src\')));');

                pkg.dependencies['less-middleware'] = '~2.1.0';
                break;
            case 'stylus':
                copy('templates/css/style.styl', path + '/src/stylesheets/style.styl');
                app = app.replace('{css}', eol + 'app.use(require(\'stylus\').middleware(path.join(__dirname, \'src\')));');

                pkg.dependencies['stylus'] = '~0.53.0';
                break;
            case 'compass':
                copy('templates/css/style.scss', path + '/src/stylesheets/style.scss');
                app = app.replace('{css}', eol + 'app.use(require(\'node-compass\')({mode: \'expanded\'}));');

                pkg.dependencies['node-compass'] = '~0.2.4';
                break;
            case 'sass':
                copy('templates/css/style.sass', path + '/src/stylesheets/style.sass');
                app = app.replace('{css}', eol + 'app.use(require(\'node-sass-middleware\')({\n  src: path.join(__dirname, \'src\'),\n  dest: path.join(__dirname, \'src\'),\n  indentedSyntax: true,\n  sourceMap: true\n}));');
                pkg.dependencies['node-sass-middleware'] = '~0.9.7';
                break;
            default:
                copy('templates/css/style.css', path + '/src/stylesheets/style.css');
                copy('templates/css/bootstrap.min.css', path + '/src/stylesheets/bootstrap.css');
                app = app.replace('{css}', '');
        }

        // 增加webpack支持
        if (cmd.webpack) {
            app = app.replace('{webpack}', eol + read('templates/webpack.js'));
            util.writeSync(path + '/webpack.config.js', read('templates/webpack.config.hot.js'));

            pkg.dependencies['webpack'] = '~1.12.14';
            pkg.dependencies['webpack-dev-middleware'] = '~1.5.1';
            pkg.dependencies['webpack-hot-middleware'] = '~2.9.0';

        } else {
            app = app.replace('{webpack}', '');
            util.writeSync(path + '/webpack.config.js', read('templates/webpack.config.js'));
        }

        pkg.devDependencies['babel-core'] = '^5.8.35';
        pkg.devDependencies['babel-loader'] = '^5.4.0';
        pkg.devDependencies['raw-loader'] = '~0.5.1';
        pkg.devDependencies['style-loader'] = '~0.13.0';
        pkg.devDependencies['babel-plugin-react-transform'] = '~2.0.2';
        pkg.devDependencies['babel-plugin-add-module-exports'] = '~0.1.2';
        pkg.devDependencies['babel-preset-es2015'] = '~6.5.0';
        pkg.devDependencies['babel-preset-react'] = '~6.5.0';
        pkg.devDependencies['babel-preset-stage-0'] = '~6.3.13';
        pkg.devDependencies['es3ify-loader'] = '~0.1.0';
        // 排序
        pkg.dependencies = sortedObject(pkg.dependencies);

        copy('templates/favicon.ico', path + '/favicon.ico');
        copy('templates/src', path + '/src', {exclude: 'templates/src/containers/IndexExt.js'});
        copy('templates/js/router.js', path + '/router.js');
        copy('templates/js/common', path + '/common');
        copy('templates/js/config', path + '/config');
        copy('templates/js/controller', path + '/controller');
        copy('templates/js/models', path + '/models');

        // 增加ie8+的支持
        if (cmd.ie8) {
            pkg.dependencies['es5-shim'] = '~4.5.7';
            pkg.dependencies['console-polyfill'] = '~0.2.2';
            pkg.dependencies['es6-promise'] = '~3.1.2';
            pkg.dependencies['core-js'] = '~1.2.6';
            pkg.dependencies['fetch-ie8'] = '~1.4.2';
            index = index.replace('{ie8}', 'require(\'es5-shim\')\nrequire(\'es5-shim/es5-sham\');\nrequire(\'console-polyfill\');\nrequire(\'es6-promise\');\nrequire(\'core-js/fn/object/assign\');\nrequire(\'fetch-ie8\');');
        } else {
            index = index.replace('{ie8}', '');
        }
        util.writeSync(path + '/src/containers/IndexExt.js', index);

        // pm2
        if (cmd.pm2) {
            pkg.scripts["start"] = "pm2 start ./bin/www";
            pkg.scripts["restart"] = "pm2 restart ./bin/www";
            pkg.scripts["stop"] = "pm2 stop ./bin/www";
        } else {
            pkg.scripts["start"] = "node ./bin/www";
        }

        // 写入文件
        util.writeSync(path + '/package.json', JSON.stringify(pkg, null, 4));
        util.writeSync(path + '/bin/www', www);
        util.writeSync(path + '/app.js', app);

        // git
        if (cmd.git) {
            copy('templates/gitignore', path + '/.gitignore');
        }

        complete();
    });
}

/**
 * Check if the given directory `path` is empty
 * @param {type} path
 * @param {type} fn
 * @returns {undefined}
 */
function emptyDirectory(path, fn) {
    fs.readdir(path, function (err, files) {
        if (err && 'ENOENT' != err.code)
            throw err;
        fn(!files || !files.length);
    });
}

/**
 * 
 * @param {type} code
 * @returns {undefined}
 */
function exit(code) {
    function done() {
        if (!(draining--))
            _exit(code);
    }

    var draining = 0;
    var streams = [process.stdout, process.stderr];

    exit.exited = true;

    streams.forEach(function (stream) {
        draining += 1;
        stream.write('', done);
    });

    done();
}

/**
 * 
 * @returns {Boolean}
 */
function launchedFromCmd() {
    return process.platform === 'win32' && process.env._ === undefined;
}

/**
 * main
 * @returns {undefined}
 */
function main() {
    // Path
    var destinationPath = cmd.args.shift() || '.';

    // App name
    var appName = path.basename(path.resolve(destinationPath));

    // Template engine
    cmd.template = 'jade';
    if (cmd.ejs)
        cmd.template = 'ejs';
    if (cmd.hogan)
        cmd.template = 'hjs';
    if (cmd.hbs)
        cmd.template = 'hbs';

    emptyDirectory(destinationPath, function (empty) {
        if (empty || cmd.force) {
            createApplication(appName, destinationPath);
        } else {
            confirm('destination is not empty, continue? [y/N] ', function (ok) {
                if (ok) {
                    process.stdin.destroy();
                    createApplication(appName, destinationPath);
                } else {
                    console.error('aborting');
                    exit(1);
                }
            });
        }
    });
}

function read(src){
    return util.readSync(path.join(__dirname, '..', src), 'utf-8');
}

function copy(src, dst){
    util.copySync(path.join(__dirname, '..', src), dst);
}